// global variable
def flagCheck     = false

// workspace cleaner helper function
def cleanUpWorkspace() {
  script {
    deleteDir()
  }
}

// docker cleaner helper function
def cleanUpDocker(containerName="", imageName="") {
  script {
    if (! containerName.equals('')) {
      sh "docker stop '${containerName}' || true"
      sh "docker rm -f '${containerName}' || true"
    }
    
    if (! imageName.equals('')) {
      sh "docker rmi -f '${imageName}' || true"
      cleanUpWorkspace()      
    }
  }  
}

// pipeline declarative
pipeline {
  parameters {
    booleanParam(name: 'IS_PROD',              description: 'Is This Pipeline for Production',           defaultValue: false)
    
    string(name: 'KUBE_SRC_NAMESPACE',         description: 'Kubernetes Source Namespace',               defaultValue: 'playcourt-todo-dev')
    string(name: 'DOCKER_SRC_REGISTRY_URL',    description: 'Docker Source Registry URL',                defaultValue: 'docker-registry-default.apps.playcourt.id')
    string(name: 'DOCKER_SRC_REGISTRY_TOKEN',  description: 'Docker Source Registry Token',              defaultValue: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJwbGF5Y291cnQtdG9kby1kZXYiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiamVua2lucy10b2tlbi10cHIxaiIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJqZW5raW5zIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYTliMzI5NGItNjBkZS0xMWU4LWJmNzMtMDA1MDU2OGMyZDUyIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OnBsYXljb3VydC10b2RvLWRldjpqZW5raW5zIn0.a1E3U-frnrpZCRByhy2YGDYTO-xRdcacfxVgduzTIN9rjGTPbjmwa24Q0i8IltwxTWUjodZOMekUYP5JLDrjGwYBIkiTATG4bSAYKDaSwTTaRFFmxhQjd9YZCwrl71GAItMX1tBUtnN6B2CaTlMDh3w7N9-i8furYPHDRVP383g0XQsC8e6H6Lu6FxEzpq5MEnr1P_90Euuu8SeTWjGk6ERW9CAUzslGQBl3fSntSEvkRQwGDEmuEkYcD11tr715wLi2qXe-4H53Q0IrJVieCk_6AZfFk5mypYioz1-eFfvFOAkfwAnWjUbC-f4yUQf7Kcpeaqr4TbXxQYAyfvdHAw')
    string(name: 'DOCKER_SRC_IMAGE_NAME',      description: 'Docker Source Image Name',                  defaultValue: 'api')
    string(name: 'DOCKER_SRC_IMAGE_TAG',       description: 'Docker Source Image Tag',                   defaultValue: '')

    string(name: 'KUBE_DST_NAMESPACE',         description: 'Kubernetes Destination Namespace',          defaultValue: 'playcourt-todo-uat')
    string(name: 'DOCKER_DST_REGISTRY_URL',    description: 'Docker Destination Registry URL',           defaultValue: 'docker-registry-default.apps.playcourt.id')
    string(name: 'DOCKER_DST_REGISTRY_TOKEN',  description: 'Docker Destination Registry Token',         defaultValue: 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJwbGF5Y291cnQtdG9kby11YXQiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlY3JldC5uYW1lIjoiamVua2lucy10b2tlbi14NXMwayIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VydmljZS1hY2NvdW50Lm5hbWUiOiJqZW5raW5zIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiOTc2YTI2YjAtNjBkZS0xMWU4LWFmZmMtMDA1MDU2OGM0YzQyIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OnBsYXljb3VydC10b2RvLXVhdDpqZW5raW5zIn0.E7SRQMytCLR9xvrkmdHKgtYQj_vCN35bSvG0R8kBA7kpSBU-jjM78c8WJ6y8kSRrpqIcnLx6QLGsH6qxpMt9_5X8uXAU2rXJKzDR07ZYcHG78uuFDQSkOIvUnu6aXx9NBQPNaAk7dwF_glGUVFnzKTkbcF3GyP-Cj99XfgxvxDQI8Yqa6EPm_pXMLDhcnpLmdksYWOgH-2VxyP1ndQSckaad0yoUtsTRszmkWvrCchJGJL8Ld8JC4aKktqAlGh7UB3gfuAUMb7t1bptKQCASDm9QqcqQDusp5aNNy8j3MgTD8jcWV6lJb4k9mixCYwm0dmaI6FsRoLrH8Ddj2Kbitg')
    string(name: 'DOCKER_DST_IMAGE_NAME',      description: 'Docker Destination Image Name',             defaultValue: 'api')

    string(name: 'JOB_NOTIF_MAIL_DST',         description: 'Jenkins Job Mail Notification Destination', defaultValue: '')
    string(name: 'JOB_NEXT_NAME',              description: 'Jenkins Next Job Name',                     defaultValue: '')
    string(name: 'JOB_NEXT_TOKEN',             description: 'Jenkins Next Job Token',                    defaultValue: '')
  }

  agent none
  stages {
    stage("Initialize") {
      agent { label "jenkins-agent-docker-1" }
      steps {
        script {
          echo "Cleaning-up Environment"
          cleanUpDocker("","${params.DOCKER_SRC_REGISTRY_URL}/${params.KUBE_SRC_NAMESPACE}/${params.DOCKER_SRC_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG}")
          cleanUpDocker("","${params.DOCKER_DST_REGISTRY_URL}/${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:latest")

          echo "Checking-up Environment"
          sh "docker --version"
        }
      }
    }

    stage("Pulling Source Image") {
      agent { label "jenkins-agent-docker-1" }
      steps {
        script {
          try {
            flagCheck = false

            echo "Loging-in to Docker Source Registry"
            sh "docker login --username='${params.KUBE_SRC_NAMESPACE}' --password='${params.DOCKER_SRC_REGISTRY_TOKEN}' ${params.DOCKER_SRC_REGISTRY_URL}"

            echo "Pulling Image from Docker Source Registry"
            sh "docker pull ${params.DOCKER_SRC_REGISTRY_URL}/${params.KUBE_SRC_NAMESPACE}/${params.DOCKER_SRC_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG}"

            echo "Loging-out from Docker Source Registry"
            sh "docker logout ${params.DOCKER_SRC_REGISTRY_URL}"

            flagCheck = true
          } finally {
            if (flagCheck == false) {
              echo "Pulling Source Image: Failed, Exiting Pipeline"
              cleanUpDocker("","${params.DOCKER_SRC_REGISTRY_URL}/${params.KUBE_SRC_NAMESPACE}/${params.DOCKER_SRC_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG}")
              sh "docker logout ${params.DOCKER_SRC_REGISTRY_URL}"

              currentBuild.result = 'FAILURE'
              sh "exit 1"
            } else {
              echo "Pulling Source Image: Success, Continuing Pipeline"
            }
          }
        }
      }
    }

    stage("Re-tagging Source Image as Destination Image") {
      agent { label "jenkins-agent-docker-1" }
      steps {
        script {
          try {
            flagCheck = false

            echo "Re-tagging Source Image as Destination Image"
            sh "docker tag ${params.DOCKER_SRC_REGISTRY_URL}/${params.KUBE_SRC_NAMESPACE}/${params.DOCKER_SRC_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG} ${params.DOCKER_DST_REGISTRY_URL}/${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG}"
            sh "docker tag ${params.DOCKER_SRC_REGISTRY_URL}/${params.KUBE_SRC_NAMESPACE}/${params.DOCKER_SRC_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG} ${params.DOCKER_DST_REGISTRY_URL}/${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:latest"

            flagCheck = true
          } finally {
            if (flagCheck == false) {
              echo "Re-tagging Source Image as Destination Image: Failed, Exiting Pipeline"
              cleanUpDocker("","${params.DOCKER_SRC_REGISTRY_URL}/${params.KUBE_SRC_NAMESPACE}/${params.DOCKER_SRC_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG}")
              cleanUpDocker("","${params.DOCKER_DST_REGISTRY_URL}/${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG}")
              cleanUpDocker("","${params.DOCKER_DST_REGISTRY_URL}/${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:latest")

              currentBuild.result = 'FAILURE'
              sh "exit 1"
            } else {
              echo "Re-tagging Source Image as Destination Image: Success, Continuing Pipeline"
            }
          }
        }
      }
    }

    stage("Pushing Destination Image") {
      agent { label "jenkins-agent-docker-1" }
      steps {
        script {
          try {
            flagCheck = false

            echo "Loging-in to Docker Destination Registry"
            sh "docker login --username='${params.KUBE_DST_NAMESPACE}' --password='${params.DOCKER_DST_REGISTRY_TOKEN}' ${params.DOCKER_DST_REGISTRY_URL}"
            
            echo "Pushing Image to Docker Destination Registry"
            sh "docker push ${params.DOCKER_DST_REGISTRY_URL}/${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG}"
            sh "docker push ${params.DOCKER_DST_REGISTRY_URL}/${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:latest"

            echo "Loging-out from Docker Destination Registry"
            sh "docker logout ${params.DOCKER_DST_REGISTRY_URL}"

            if (! params.IS_PROD && ! params.JOB_NOTIF_MAIL_DST.equals('') && ! params.JOB_NEXT_NAME.equals('') && ! params.JOB_NEXT_TOKEN.equals('')) {
              echo "Sending Mail Notification for Pushed Image with New Tag"
              emailext(
                to: "${params.JOB_NOTIF_MAIL_DST}",
                subject: "Jenkins ${env.JOB_NAME}: An Image With New Tag Has Been Pushed",
                body: """
                  <html>
                    <body>
                      <h3>Congratulation!</h3>
                      <h4>An Image With New Tag Has Been Pushed</h4>
                      <br/>
                      <p>
                        Information :<br/>
                        <table border='0'>
                          <tr>
                            <td>Registry URL</td>
                            <td>: <strong>${params.DOCKER_SRC_REGISTRY_URL}</strong></td>
                          </tr>                        
                          <tr>
                            <td>Image Name</td>
                            <td>: <strong>${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:${params.DOCKER_DST_IMAGE_TAG}</strong></td>
                          </tr>
                        </table>
                      </p>
                      <br/>
                      <p>
                        Please click the link below to promote the image, thank you.<br/>
                        <a href='https://jenkins.playcourt.id/job/${params.JOB_NEXT_NAME}/buildWithParameters?token=${params.JOB_NEXT_TOKEN}&DOCKER_SRC_IMAGE_TAG=${params.DOCKER_SRC_IMAGE_TAG}&IS_PROD=true'>
                          <strong>Promote Image: ${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:${params.DOCKER_DST_IMAGE_TAG}</strong>
                        </a>
                      </p>
                    </body>
                  </html>
                """
              )
            }

            flagCheck = true
          } finally {
            if (flagCheck == false) {
              echo "Pushing Destination Image: Failed, Exiting Pipeline"
              cleanUpDocker("","${params.DOCKER_SRC_REGISTRY_URL}/${params.KUBE_SRC_NAMESPACE}/${params.DOCKER_SRC_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG}")
              cleanUpDocker("","${params.DOCKER_DST_REGISTRY_URL}/${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG}")
              cleanUpDocker("","${params.DOCKER_DST_REGISTRY_URL}/${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:latest")
              sh "docker logout ${params.DOCKER_DST_REGISTRY_URL}"

              currentBuild.result = 'FAILURE'
              sh "exit 1"
            } else {
              echo "Pushing Destination Image: Success, Continuing Pipeline"
            }
          }
        }
      }
    }

    stage("Finalize") {
      agent { label "jenkins-agent-docker-1" }
      steps {
        script {
          echo "Cleaning-up Environment"
          cleanUpDocker("","${params.DOCKER_SRC_REGISTRY_URL}/${params.KUBE_SRC_NAMESPACE}/${params.DOCKER_SRC_IMAGE_NAME}:${params.DOCKER_SRC_IMAGE_TAG}")
          cleanUpDocker("","${params.DOCKER_DST_REGISTRY_URL}/${params.KUBE_DST_NAMESPACE}/${params.DOCKER_DST_IMAGE_NAME}:latest")
        }
      }
    }

  }
}